#!/bin/bash
#
#	descarga y reproduce torrent
#

[ "$(pgrep feh)" ] && exit
# si existe otro torrent-peerflix se lo cancela

killall torrent-buscar
killall peerflix
killall feh

function mensaje {
	echo "$*" >> /tmp/info
}

function torrent-placa {
	cd /tmp
	# muestra la portada de la pelicula
	rm /tmp/bg.jpg
	[ "$2" == "" ] && cp /usr/local/share/pixmaps/torrent-peerflix/ /tmp/bg.jpg || cp ~/.cache/imdb/$2.jpg /tmp/bg.jpg
	feh /tmp/bg.jpg -qZYFr -R1 -C /usr/share/fonts/truetype/dejavu/ -e "DejaVuSans/18" -N --title "$1" --info "cat /tmp/info" -A "transmission-gtk $(cat /tmp/magnet) &; killall feh"
	killall omxplayer
	killall omxplayer.bin
	killall mpv
	killall mplayer
	killall peerflix
	killall torrent-peerflix

}

# espacio en el disco
#
#

PEERFLIX=$(which peerflix)
DESCARGA=$(which transmission-gtk)

echo > /tmp/info

if [ $(df -H | grep /$ | expand | tr -s " " | cut -d " " -f5 | cut -d "%" -f1) -ge 85 ]; then
	rm -r /tmp/torrent-stream/
	[ "$USER" == "pi" ] && sudo rm -r ~/.local/share/Trash/*
	mensaje "¡¡disco lleno!!"
fi

torrent-placa "$1" $2 &


B=$1
mensaje "$1"
mensaje
[ "$(echo $B | grep '^magnet')" == "" ] && B=$(torrent-buscar "$1" "$2")

# si no hay que descargar cierra
[ "$B" == "" ] && mensaje "No disponible en este momento" && exit


TITULO=$(echo | $PEERFLIX -l "$B" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g")
echo "$B" > /tmp/magnet


mensaje "¡Torrent encontrado!"

mensaje "Analizando Torrent..." > /dev/stderr

# la dd la extructura para que paresca peerflix
[ "$(echo $B | grep '^magnet')" == "" ] && TITULO="1 :$1.mp4 "

function lista () {
	zenity --title "Lista de archivos" --list --text="Seleciones un o más archivos de descargar" --hide-header --column N --column TITULO --column peso  --hide-column=1 | cut -d"|" -f1
	# falta agregar el tipo de archivo
}

# identificar el mimetype
# peliculas
# avi mp4 mkv ogv ogg wmv mov m4v mpg mpeg
PELICULAS=$(echo "$TITULO"| grep -i "\.\(avi\|mp4\|mkv\|m4v\|og.\|wmv\|mov\|divx\|vob\)\ " | grep -iv "sample" )
if [ ! "$PELICULAS" == "" ]; then
	CANTIDAD=$(echo "$PELICULAS" | wc -l)
	# si es una serie elegis, si no busca el unico video y solo baja eso
	[ "$CANTIDAD" -gt "1" ] && \
		N=$(echo -e "$PELICULAS\nTODO\nDescargar Todos (y ver despues)"  | sed 's/\:/\n/g; s/\ *$//g' | lista ) \
		|| N=$(echo "$PELICULAS" | cut -d':' -f1 | sed 's/\ *$//g')
	# falta la opcion de descargar completo
	[ "$N" == "TODO" ] && $DESCARGA $B && exit
	[ "$N" == "" ] && mensaje "ocurrio un error :(" && exit # tal vez enviar un error
	mensaje

	# descaga la pelicula
	PELICULA=$(echo "$PELICULAS" | grep "^$N\ *:")
	# nombre de la pelicula buscada
	NOMBRE=$(echo $PELICULA | cut -d: -f2 | sed 's/^\ *//g; s/\ *$//g')

	#MD5SUB=$(echo "$NOMBRE" | md5sum | cut -d" " -f1)
	[ "$(head ~/.cache/sub/$2/0)" == "" ] && torrent-subtitulos "$NOMBRE" "$2"
	# intenta bajar los subtitulos en español
	#if [ -f ~/.cache/sub/$MD5SUB ]; then
	PSUB=" --subtitles ~/.cache/sub/$2/0 "
	SUB="-sub ~/.cache/sub/$2/0 "

	[ -x "$(which mpv)" ] && PLAY="-k -- -$SUB -fs"  && PG="mpv"
	[ -x "$(which mplayer)" ] && PLAY="-m -- -utf8 $SUB -fs" && PG="mplayer"
	[ -x "$(which omxplayer)" ] && PLAY="-o -- --align center --vol 6 --timeout 30 $PSUB " && PG="omxplayer"

	sleep 4
	mensaje
	mensaje "Presione \"0\" para descarga"
	mensaje "y ver después..."
	mensaje
	touch ~/.cache/sub/$2/0
	(sleep 15; while [ ! $(pgrep $PG) ]; do  mensaje "Esperando más pares..."; sleep 15; done) &
	#guarda la hora
	DATE="$(date +%s)"
	for R in {1..5}; do
		if [ ! "$(echo $B | grep '^magnet')" == "" ]; then
			$PEERFLIX "$B" -i $N $PLAY
		else
                        VIDEO="/tmp/video"
			N=1
                        echo "$B" | uniq | while read V; do
				killall youtube-dl
                                rm $VIDEO 2> /dev/null
                                mensaje "${N}/$(echo "$B" | wc -l) $V"
				# esto solo funciona en mplayer por ahora
                                youtube-dl --min-filesize 150m -o $VIDEO $V &
                                sleep 15
				$PG -fs -utf8 $SUB $VIDEO.part
				N=$((N=N+1))
                        done
                fi
		#verifica la hora, si no paso mucho retoma
		[ "$(($(date +%s)-$DATE))" -gt "120" ] && break
		mensaje "Ups! Conexión lenta..."
		sleep 2
		mensaje "Volviendo a intentar..."
	done
	killall feh
	# preguntar si se quiere descargar si paso poco tiempo y R es mayor a 1
	exit
fi


# esto deberia ser parte de la lista
TIPO=$(echo "historietas	cb.
música	mp3|oga|aif|wav
imágenes	png|jpg|bmp
documentos	epub|pdf|doc*|xls
comprimidos	zip|rar|zx|gzip|7z" | while read T; do
 	E="$(echo "$T" | sed 's/^.*\t//g;')"
	echo "$(echo "$TITULO" | grep -i "\.\($E\)\ " | wc -l) - $(echo $T | sed 's/\ .*$//g')"
done | grep -v "^0" )

mensaje "$TIPO" &

[ "$N" == "TODO" ] && $DESCARGA $B

#N=$(echo -e "$TITULO\nTODO:Descargar Todo" | sed 's/\:/\n/g; s/\ $//g' | lista)


exit

Quehaceres
==========

- proponer descagar peliculas que van a tardar mucho
- agregar tipo de archivo a las listas
- verificar pares
- hacer advertencias lindas para cuando se descargan cosas
